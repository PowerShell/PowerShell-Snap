parameters:
  - name: vmImage
    default: 'ubuntu-18.04'
  - name: channel
    type: string
  - name: release
    default: 'private'

jobs:
- job: scan
  displayName: Scan ${{ parameters.channel }}

  pool:
    vmImage: ubuntu-latest

  variables:
    - name: channel
      value: ${{ parameters.channel }}

  steps:
  - checkout: self
    path: $(repoFolder)
  - checkout: ComplianceRepo

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadType: specific
      itemPattern: '$(channel)/**/*.snap'

  - template: EsrpScan.yml@ComplianceRepo
    parameters:
      scanPath: $(System.ArtifactsDirectory)
      pattern: |
        **/*.snap
      scanningService: 'pwshEsrpScanning'

- template: ./Approval.yml
  parameters:
    displayName: 'Approve ${{ parameters.channel }}-${{ parameters.release }} upload'
    instructions: 'Approving this will trigger the upload of the snap as "${{ parameters.channel }}-${{ parameters.release }}"'
    jobName: 'push_approval'

- job: push
  dependsOn:
  - push_approval
  - scan

  displayName: Push to ${{ parameters.release }}

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    - name: ReleaseTag
      value: edge/default
    - group: SnapLogin
    - name: channel
      value: ${{ parameters.channel }}

  steps:
  - checkout: self

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      downloadType: specific
      itemPattern: '$(channel)/**/*.snap'

  - pwsh: |
      $snaps = Get-ChildItem $(System.ArtifactsDirectory)/*.snap -recurse -File
      if($snaps.Count -gt 1)
      {
        $snaps | out-string -width 100 | Write-Verbose -verbose
        Write-Error "***More than one snap found***" -errorAction stop
      }
    displayName: Verify that only one snap was downloaded

  - pwsh: |
      [string]$Branch=$env:BUILD_SOURCEBRANCH
      $branchOnly = $Branch -replace '^refs/heads/';
      $branchOnly = $branchOnly -replace '[_\-]'

      if('${{ parameters.release }}' -eq 'private') {
        if($branchOnly -eq 'master' -or $branchOnly -like '*dailytest*')
        {
            Write-verbose "release branch:" $branchOnly -verbose
            $generatedBranch = (get-date).ToString('yyyyMMddHH')
            $releaseTag = "edge/$generatedBranch"
        }
        else
        {
            Write-verbose "non-release branch" -verbose
            # Branch is named <previewname>
            $releaseTag = "edge/$branchOnly"
        }
      } else {
        $releaseTag = "${{ parameters.release }}"
      }

      $vstsCommandString = "vso[task.setvariable variable=ReleaseTag]$releaseTag"
      Write-Verbose -Message "setting ReleaseTag to $releaseTag" -Verbose
      Write-Host -Object "##$vstsCommandString"
    displayName: Set ReleaseTag Variable

  - pwsh: |
        sudo chown root:root /
    displayName: 'Make sure root owns root'
    condition: succeeded()

  - pwsh: |
        $channel = (Get-Content ./snapcraftConfig.json | ConvertFrom-Json).channel
        Write-Verbose -Verbose -Message "using Channel $channel"
        sudo snap install snapcraft --classic "--channel=$channel"
    condition: succeeded()
    displayName: 'Install snapcraft'

  - pwsh: |
      $loginFile='./snapstore.login'

      '$(SNAPLOGIN)' | base64 --decode --ignore-garbage > $loginFile
      snapcraft login --with $loginFile
      rm $loginFile
    displayName: 'snapcraft login'

  - pwsh: |
      $track = 'latest'
      if('$(channel)' -eq 'lts')
      {
        $track = 'lts'
      }

      $snaps = Get-ChildItem $(System.ArtifactsDirectory)/*.snap -recurse -File | Select-Object -ExpandProperty FullName

      foreach($snap in $snaps)
      {
        Write-Verbose -Verbose -Message "Uploading $snap to $track/$(ReleaseTag)"
        snapcraft upload --release "$track/$(ReleaseTag)" $snap
      }
    displayName: 'snapcraft upload'

  - pwsh: |
      snapcraft logout
    displayName: 'snapcraft logout'
    condition: always()

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
