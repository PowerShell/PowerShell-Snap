parameters:
  queue: ubuntu-16.04
  snapChannel: 'stable'
  test: Yes

jobs:
- job: ${{ parameters.SnapChannel }}
  displayName: ${{ parameters.SnapChannel }}

  pool:
    vmImage: ${{ parameters.queue }}

  variables:
    SnapChannel: ${{ parameters.SnapChannel }}
    vmImage: ${{ parameters.queue }}

  steps:

  - powershell: |
        sudo chown root:root /
    displayName: 'Make sure root owns root'
    condition: succeeded()

  - powershell: 'dir env:'
    displayName: 'Capture Environment'

  - powershell: |
        $channel = '$(SnapChannel)'
        switch($channel)
        {
          'stable' {
            $buildName = 'powershell-snap-latest'
            $message = "vso[task.setvariable variable=PS_SNAP_EXEC;]powershell"
            Write-Host $message
            Write-Host "##$message"
          }
          'preview' {
            $buildName = 'powershell-snap-preview-latest'
            $message = "vso[task.setvariable variable=PS_SNAP_EXEC;]powershell-preview"
            Write-Host $message
            Write-Host "##$message"
          }
          default {
            throw "Unknown channel: $channel"
          }
        }
        Write-Host "Building snap..."
        ./tools/releaseBuild/vstsbuild.ps1 -Name $buildName
        Write-Host "finding snap..."
        $snap = Get-ChildItem "$env:AGENT_TEMPDIRECTORY/*.snap" -Recurse -ErrorAction SilentlyContinue | Select-Object -ExpandProperty fullname -ErrorAction SilentlyContinue
        if(!$snap)
        {
          throw "snap build failed"
        }
        else
        {
          $message = "vso[task.setvariable variable=PS_SNAP_PATH;]$snap"
          Write-Host $message
          Write-Host "##$message"
        }
    displayName: 'Build $(SnapChannel)'
    condition: succeeded()
    continueOnError: true

  - powershell: |
        sudo snap install $(PS_SNAP_PATH) --classic --dangerous
    displayName: 'Install $(SnapChannel) snap'
    condition: succeeded()

  - powershell: |
        &"$(PS_SNAP_EXEC)" -nologo -c '$psversiontable'
    displayName: 'Test $(PS_SNAP_EXEC) snap'
    condition: and(succeeded(), eq('${{ parameters.test }}','Yes'))

  - powershell: |
        $env:COREHOST_TRACE=1
        /snap/$(PS_SNAP_EXEC)/current/opt/powershell/pwsh -nologo -c '$psversiontable'
    displayName: 'Alternative Test $(PS_SNAP_EXEC) snap'
    condition: and(succeeded(), ne('${{ parameters.test }}','Yes'))

  # Uploads any packages as an artifact
  - powershell: |
      Write-Host "##vso[artifact.upload containerfolder=artifacts;artifactname=artifacts]$(PS_SNAP_PATH)"
    displayName: Publish Artifact
    condition: always()
    continueOnError: true
