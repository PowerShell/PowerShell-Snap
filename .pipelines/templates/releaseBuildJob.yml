parameters:
  - name: channel
    default: 'stable'
  - name: test
    default: Yes

jobs:

- job: build_${{ parameters.channel }}
  displayName: Build ${{ parameters.channel }}
  variables:
    - name: channel
      value: ${{ parameters.channel }}
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)/out'
    - name: SNAP_MOUNT
      value: $(Agent.TempDirectory)/pwshSnap
    - name: SNAP_COPY
      value: $(Agent.TempDirectory)/pwshSnapCopy
    - name: SNAP_TARGZ
      value: $(Agent.TempDirectory)/pwshSnap.tar.gz

  pool:
    type: linux
    isCustom: true
    name: $(ubuntuPool)
    demands:
      - ImageOverride -equals PSMMSUbuntu20.04-Secure

  steps:
    - checkout: self
      lfs: false

    - template: ./createOutputDirectory-linux.yml

    - powershell: |
          sudo chown root:root /
      displayName: 'Make sure root owns root'
      condition: succeeded()

    - template: ./InstallSnapd.yml

    - powershell: 'dir env:'
      displayName: 'Capture Environment'

    - powershell: |
          $channel = (Get-Content ./snapcraftConfig.json | ConvertFrom-Json).channel
          Write-Verbose -Verbose -Message "using Channel $channel"
          sudo snap install snapcraft --classic "--channel=$channel"
      displayName: Install snapcraft
      condition: succeeded()
      retryCountOnTaskFailure: 2

    - powershell: |
        switch('$(channel)') {
          'stable' {
              cd stable
              $message = "vso[task.setvariable variable=PS_SNAP_EXEC;]powershell"
              Write-Host $message
              Write-Host "##$message"
            }
            'lts' {
              cd lts
              $message = "vso[task.setvariable variable=PS_SNAP_EXEC;]powershell"
              Write-Host $message
              Write-Host "##$message"
            }
            'preview' {
              cd preview
              $message = "vso[task.setvariable variable=PS_SNAP_EXEC;]powershell-preview"
              Write-Host $message
              Write-Host "##$message"
            }
          default {
            throw "Unknown channel: '$(channel)'"
          }
        }

        Write-Host "Building snap..."
        # destructive-mode leaves files and packages on the machine
        # This is okay because Azure DevOps Hosted machines are ephemeral.
        Write-Verbose "snapcraft version: $(snapcraft --version)" -Verbose
        snapcraft snap --debug --destructive-mode
        Write-Host "finding snap..."
        $snap = Get-ChildItem "*.snap" -Recurse -ErrorAction SilentlyContinue | Select-Object -ExpandProperty fullname -ErrorAction SilentlyContinue
        if(!$snap)
        {
          throw "snap build failed"
        }
        else
        {
          $message = "vso[task.setvariable variable=PS_SNAP_PATH;]$snap"
          Write-Host $message
          Write-Host "##$message"
        }
      displayName: Build snap $(channel)
      condition: and(succeeded(), ne(variables['$(channel)'],'no'))

    - powershell: |
        Get-ChildItem env:
      displayName: Capture env
      condition: always()

    - powershell: |
        Get-ChildItem $env:HOME/.local/state/snapcraft/log/*.log | foreach-object {
          $name = $_.fullname
          Write-Verbose -Verbose "uploading '$name'"
          Write-Host "##vso[artifact.upload containerfolder=$(channel)-logs;artifactname=$(channel)-log]$name"
        }
      displayName: 'Upload $(channel) build log'
      condition: always()

    - powershell: |
          sudo snap install $(PS_SNAP_PATH) --classic --dangerous
      displayName: 'Install $(channel) snap'
      condition: succeeded()

    - powershell: |
          &"$(PS_SNAP_EXEC)" -nologo -c '$psversiontable'
      displayName: 'Test $(channel) snap'
      condition: and(succeeded(), eq('${{ parameters.test }}','Yes'))

    # This is what we would need to do if this wasn't a custom job
    - powershell: |
        Copy-Item $(PS_SNAP_PATH) -Destination $(ob_outputDirectory)/ -verbose
        $artifactName = "drop_build_$(channel)_build_$(channel)"
        Write-Host "##vso[artifact.upload containerfolder=${artifactName};artifactname=${artifactName}]$(ob_outputDirectory)"
      displayName: Copy Artifact to OneBranch Job output directory and publish - $(channel)
      condition: succeeded()
      continueOnError: true

    - pwsh: |
        $snap = '$(PS_SNAP_PATH)'
        $mount = $env:SNAP_MOUNT
        $null = new-item -Path $mount -ItemType Directory -Force
        Write-Verbose -Verbose "sudo mount -t squashfs -o ro $snap $mount"
        sudo mount -t squashfs -o ro $snap $mount
        Write-Verbose -Verbose "get-childitem -recurse $mount"
        get-childitem -recurse $mount
      displayName: Unsquash Snap and capture contents

    # Copy to read write filesystem because scan tries to write back to this folder.
    - pwsh: |
        $mount = $env:SNAP_MOUNT
        $readWriteCopy = $env:SNAP_COPY
        Write-Verbose -Verbose "mount: $mount; copy: $readWriteCopy"
        $null = new-item -Path $readWriteCopy -ItemType Directory -Force
        $filesToExclude = Get-ChildItem -Path $mount -Recurse | Where-Object Attributes -match reparsepoint
        $exclude = @()
        $exclude += $filesToExclude | ForEach-Object { "$($_.Name)" + "*" }
        Copy-Item -Path $mount -Destination $readWriteCopy\ -Exclude $exclude -Force -Recurse -Verbose
        Write-Verbose -Verbose "get-childitem -recurse $readWriteCopy"
        get-childitem -recurse $readWriteCopy
      displayName: Copy to read/write fs

    - pwsh: |
        Write-Verbose "tar -czf ${env:SNAP_TARGZ} ${env:SNAP_COPY}" -Verbose
        tar -czf ${env:SNAP_TARGZ} ${env:SNAP_COPY}
        copy-item ${env:SNAP_TARGZ} -destination $(ob_outputDirectory)/ -verbose
      displayName: tar the snap contents from the r/w copy

    # Uploads any packages as an artifact
    - powershell: |
        $artifactName = "drop_build_$(channel)_build_$(channel)_targz"
        Write-Host "##vso[artifact.upload containerfolder=${artifactName};artifactname=${artifactName}]${env:SNAP_TARGZ}"
      displayName: Publish Artifact for custom Job - $(channel)
      condition: succeeded()
      continueOnError: true